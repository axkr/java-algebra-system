(* ----------------------------------------------------------------------------
 * $Id$
 * ----------------------------------------------------------------------------
 * This file is part of MAS.
 * ----------------------------------------------------------------------------
 * Copyright (c) 1989 - 1992 Universitaet Passau
 * ----------------------------------------------------------------------------
 * $Log$
 * Revision 1.1  2000/06/17 20:40:56  kredel
 * Initial revision
 *
 * Revision 1.1.1.1  2000/06/17 20:40:56  kredel
 * Clean import of MAS 1.0 from Uni Passau
 *
 * Revision 1.1  1992/01/30 12:19:57  kredel
 * Initial revision
 *
 * ----------------------------------------------------------------------------
 *)

(*test linear algebra stuff. 12.10.90 hk *)

CLOUT("loading test programms ...").

(* ----- rational number matices ------ *)

PROCEDURE tga(n,m);
VAR   r, B, D, L, U: LIST;
BEGIN
(*1*) (*generate*) B:=RNMHILBERT(n,m);
      CLOUT("mat ="); RNMWRITE(B);
(*2*) (*compute*)
      RNMGELUD(B,L,U);
(*3*) (*write*)
      CLOUT("L=");    RNMWRITE(L);
      CLOUT("U=");    RNMWRITE(U);
(*4*) (*rang*)
      r:=MRANG(U);
      CLOUT("r=");    IWRITE(r); BLINES(0);
(*5*) (*compare*)
      D:=RNMGE(B);
      CLOUT("GE=");   RNMWRITE(D);
      END tga;


PROCEDURE tinv(n);
VAR   A, AP, EP: LIST; 
BEGIN
(*1*) A:=RNMHILBERT(n,n);
      CLOUT("Eingabe"); RNMWRITE(A);
      AP:=RNMINV(A);
      CLOUT("Inverse"); RNMWRITE(AP);
      EP:=RNMPROD(A,AP);
      CLOUT("Product"); RNMWRITE(EP);
(*2*) END tinv;


PROCEDURE tdet(n);
VAR   A, d1, d2: LIST; 
BEGIN
(*1*) A:=RNMHILBERT(n,n);
      CLOUT("Eingabe"); RNMWRITE(A);
      d1:=RNMDET(A);
      CLOUT("Det, Gauss   "); RNVWRITE(LIST(d1)); BLINES(0);
      d2:=RNMDETL(A);
      CLOUT("Det, Laplace "); RNVWRITE(LIST(d2)); BLINES(0);
(*2*) END tdet;


PROCEDURE mksol(v,A);
VAR   X, V: LIST; 
BEGIN
(*1*) IF A = NIL THEN RETURN(NIL) END;
      X:=VEL(v,LENGTH(FIRST(A)));
      X:=LIST(X); X:=MTRANS(X);
(*2*) V:=RNMPROD(A,X);
      V:=FIRST(MTRANS(V));
      RETURN(V);
(*3*) END mksol;


PROCEDURE tso(n,m);
VAR   A, AP, a1, a2, r, B, D, L, U, X: LIST;
BEGIN
(*1*) (*generate*) AP:=RNMHILBERT(n,m); A:=AP; 
      (*make linear dependent *)
      IF n >= 2 THEN A:=MTRANS(A); 
                     ADV(A,a1,A); ADV(A,a2,A);
                     A:=COMP(a1,A); A:=COMP(a1,A); 
                     A:=MTRANS(A);
                     END;  
      B:=A;
      CLOUT("mat ="); RNMWRITE(B);
(*2*) (*compute*)
      RNMGELUD(B,L,U);
(*3*) (*write*)
      CLOUT("L=");    RNMWRITE(L);
      CLOUT("U=");    RNMWRITE(U);
(*4*) (*rang*)
      r:=MRANG(U);
      CLOUT("r=");    IWRITE(r); BLINES(0);
(*5*) (*make solution or non solution *)
      D:=mksol(LIST(1,1),A);
      CLOUT("D=");    RNVWRITE(D); BLINES(0);
(*6*) (*solve*)
      X:=RNMSDS(L,U,D);
      CLOUT("X=");    RNVWRITE(X); BLINES(0);
      END tso;


PROCEDURE tnu(n,m);
VAR   A, AP, r, B, D, L, U, X: LIST;
BEGIN
(*1*) (*generate*) AP:=RNMHILBERT(n,m); A:=AP; 
      (*make linear dependent *)
      (*A:=MTRANS(A);*)
      B:=CCONC(A,CINV(A)); 
      (*B:=MTRANS(B);*)
      CLOUT("mat ="); RNMWRITE(B);
(*2*) (*compute*)
      RNMGELUD(B,L,U);
(*3*) (*write*)
(*    CLOUT("L=");    RNMWRITE(L);*)
      CLOUT("U=");    RNMWRITE(U);
(*4*) (*rang*)
      r:=MRANG(U);
      CLOUT("rang = ");    IWRITE(r); BLINES(0);
(*5*) (*null space basis *)
      X:=RNMUNS(U);
      CLOUT("X    =");    RNMWRITE(X); 
(*6*) (*check result *)
      X:=MTRANS(X); 
      D:=RNMPROD(B,X)
      CLOUT("B*X  =");    RNMWRITE(D); 
      END tnu;


(* ----- integer matices ------ *)

PROCEDURE tiga(n,m);
VAR   r, B, D, L, U, BP: LIST;
BEGIN
(*1*) (*generate*) B:=RNMHILBERT(n,m);
      CLOUT("mat ="); RNMWRITE(B);
      BP:=IMFRNM(B);
      CLOUT("mat ="); IMWRITE(BP);
(*2*) (*compute*)
      IMGELUD(BP,L,U);
(*3*) (*write*)
      CLOUT("L=");    IMWRITE(L);
      CLOUT("U=");    IMWRITE(U);
(*4*) (*rang*)
      r:=MRANG(U);
      CLOUT("r=");    IWRITE(r); BLINES(0);
(*5*) (*compare*)
      D:=IMGE(BP);
      CLOUT("GE=");   IMWRITE(D);
      END tiga;


PROCEDURE tiinv(n);
VAR   A, AP, EP: LIST; 
BEGIN
(*1*) A:=RNMHILBERT(n,n);
      CLOUT("Eingabe"); RNMWRITE(A);
      AP:=RNMINVI(A);
      CLOUT("Inverse"); RNMWRITE(AP);
      EP:=RNMPROD(A,AP);
      CLOUT("Product"); RNMWRITE(EP);
(*2*) END tiinv;


PROCEDURE tiso(n,m);
VAR   DP, A, AP, a1, a2, r, B, D, L, U, X: LIST;
BEGIN
(*1*) (*generate*) AP:=RNMHILBERT(n,m); A:=AP; 
      (*make linear dependent *)
      IF n >= 2 THEN A:=MTRANS(A); 
                     ADV(A,a1,A); ADV(A,a2,A);
                     A:=COMP(a1,A); A:=COMP(a1,A); 
                     A:=MTRANS(A);
                     END;  
      CLOUT("mat ="); RNMWRITE(A);
(*2*) (*make solution or non solution *)
      D:=mksol(LIST(1,1),A); D:=LIST(D);
      CLOUT("sol ="); RNMWRITE(D); BLINES(0);
(*3*) (*convert *)
      IMFRNM1(A,D,B,DP);
      CLOUT("mat ="); IMWRITE(B);
      CLOUT("sol ="); IMWRITE(DP);
(*4*) (*compute*)
      IMGELUD(B,L,U);
(*5*) (*write*)
      CLOUT("L=");    IMWRITE(L);
      CLOUT("U=");    IMWRITE(U);
(*6*) (*rang*)
      r:=MRANG(U);
      CLOUT("r=");    IWRITE(r); BLINES(0);
(*7*) (*solve*)
      X:=IMSDS(L,U,FIRST(DP));
      CLOUT("X=");    RNVWRITE(X); BLINES(0);
      END tiso;


PROCEDURE tidet(n);
VAR   A, d1, d2, d3, AP: LIST; 
BEGIN
(*1*) AP:=RNMHILBERT(n,n); A:=IMFRNM(AP);
      CLOUT("Eingabe"); IMWRITE(A);
      d2:=IMDETL(A);
      CLOUT("Det, Laplace "); IVWRITE(LIST(d2)); BLINES(0);
      d1:=IMDET(A);
      CLOUT("Det, Gauss   "); IVWRITE(LIST(d1)); BLINES(0);
(*    
      d3:=MAIPDE(0,A);
      CLOUT("Det, MAIPDE  "); IVWRITE(LIST(d3)); BLINES(0);
*)
(*2*) END tidet;


PROCEDURE tinu(n,m);
VAR   A, AP, r, B, D, L, U, X: LIST;
BEGIN
(*1*) (*generate*) AP:=RNMHILBERT(n,m); A:=AP; 
      (*make linear dependent *)
      (*A:=MTRANS(A);*)
      B:=CCONC(A,CINV(A)); 
      (*B:=MTRANS(B);*)
      AP:=IMFRNM(B);
      CLOUT("mat ="); IMWRITE(AP);
(*2*) (*compute*)
      IMGELUD(AP,L,U);
(*3*) (*write*)
(*    CLOUT("L=");    IMWRITE(L);*)
      CLOUT("U=");    IMWRITE(U);
(*4*) (*rang*)
      r:=MRANG(U);
      CLOUT("rang = ");   IWRITE(r); BLINES(0);
(*5*) (*null space basis *)
      X:=IMUNS(U);
      CLOUT("X    =");    RNMWRITE(X); 
(*6*) (*check result *)
      X:=MTRANS(X); 
      D:=RNMPROD(B,X)
      CLOUT("B*X  =");    RNMWRITE(D); 
      END tinu;


PROCEDURE tall(n);
BEGIN
      IF (n < 2) OR (n > 30) THEN n:=5 END;

(*1*) CLOUT("testing ... rational number matices"); BLINES(0);

      CLOUT("LU decomposition:"); BLINES(0);
      tga(n,n); tga(n-1,n+1); tga(n+1,n-1);

      CLOUT("Inverse matrix:"); BLINES(0);
      tinv(n); tinv(n+3);

      CLOUT("Determinant:"); BLINES(0);
      tdet(n); tdet(n+3);

      CLOUT("Solve linear system:"); BLINES(0);
      tso(n,n); tso(n-1,n+1); tso(n+1,n-1);

      CLOUT("Null space basis:"); BLINES(0);
      tnu(n/2,n); tnu(n,2*n); 


(*2*) CLOUT("testing ... integer matices"); BLINES(0);

      CLOUT("LU decomposition:"); BLINES(0);
      tiga(n,n); tiga(n-1,n+1); tiga(n+1,n-1);

      CLOUT("Inverse matrix:"); BLINES(0);
      tiinv(n); tiinv(n+3);

      CLOUT("Determinant:"); BLINES(0);
      tidet(n); tidet(n+3);

      CLOUT("Solve linear system:"); BLINES(0);
      tiso(n,n); tiso(n-1,n+1); tiso(n+1,n-1);

      CLOUT("Null space basis:"); BLINES(0);
      tinu(n/2,n); tinu(n,2*n); 

      CLOUT("... done.");
(*9*) END tall;



CLOUT("... loaded.").

(* -EOF- *)
