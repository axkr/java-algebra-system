(* ----------------------------------------------------------------------------
 * $Id$
 * ----------------------------------------------------------------------------
 * This file is part of MAS.
 * ----------------------------------------------------------------------------
 * Copyright (c) 1989 - 1996 Universitaet Passau
 * ----------------------------------------------------------------------------
 * $Log$
 * Revision 1.1  2000/06/17 20:40:56  kredel
 * Initial revision
 *
 * Revision 1.1.1.1  2000/06/17 20:40:56  kredel
 * Clean import of MAS 1.0 from Uni Passau
 *
 * Revision 1.1  1996/06/08 18:15:53  pesch
 * Renamed *.test to *.mas and added new tests.
 *
 * Revision 1.2  1992/06/12  13:57:28  kredel
 * Added new domain DOMRP tests
 *
 * Revision 1.1  1992/01/30  12:21:07  kredel
 * Initial revision
 *
 * ----------------------------------------------------------------------------
 *)
 
(* test domain system. 21.4.91 hk *)
 
DOMAINS. (*show available domains*)

   
(*Integer ----------------------------------- *)
(*domain descriptor *)
dp:=ADDDREAD().          INT 
 
ADDDWRIT(dp).
 
(*variable list *)
V:=LIST("x","y","z").
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( 7 y x**4 z + 9 + 13 z**3 - x ),
( y + z**5 + 77 ) 
)
 
DILWR(P,V).
 
(* computations *)
p:=FIRST(P).
q:=DIPEXP(p,3).
 
Q:=LIST(q).
DILWR(Q,V).
 

(*Modular Digit ----------------------------- *) 
(*domain descriptor         <modulus> *) 
dp:=ADDDREAD().          MD 7
 
ADDDWRIT(dp).
 
(*variable list *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( 7 y x**4 z + 9 + 13 z**3 - x ),
( y + z**5 + 717 ) 
)
 
DILWR(P,V).
 
(* computations *)
p:=FIRST(P).
q:=DIPEXP(p,3).
 
Q:=LIST(q).
DILWR(Q,V). 


(*Modular Integer ----------------------------- *) 
(*domain descriptor         <modulus> *) 
dp:=ADDDREAD().          MI 19
 
ADDDWRIT(dp).
 
(*variable list *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( 7 y x**4 z + 13 + 19 z**3 - x ),
( y + z**5 + 77 ) 
)
 
DILWR(P,V).
 
(* computations *)
p:=FIRST(P).
q:=DIPEXP(p,3).
 
Q:=LIST(q).
DILWR(Q,V). 


(*Rational Number  ---------------------------- *) 
(*domain descriptor         <print precision> *) 
dp:=ADDDREAD().          RN 10 
 
ADDDWRIT(dp).
 
(*variable list *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( 7 y x**4 z + 9 + 13 z**3 - x ),
( y + z**5 + 77 ) 
)
 
DILWR(P,V).
 
(* computations *)
p:=FIRST(P).
q:=DIPEXP(p,3).
 
Q:=LIST(q).
DILWR(Q,V). 


(*Arbitrary precision floating point -------- *) 
(*domain descriptor         <precision> *) 
dp:=ADDDREAD().          APF 50 
 
ADDDWRIT(dp).
 
(*variable list *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( 7 y x**4 z + 9 + 13 z**3 - x ),
( y + z**5 + 77 ) 
)
 
DILWR(P,V).
 
(* computations *)
p:=FIRST(P).
q:=DIPEXP(p,3).
 
Q:=LIST(q).
DILWR(Q,V). 


(*Integral Polynomial ----------------------- *) 
(*domain descriptor        <var list> *) 
dp:=ADDDREAD().          IP(a,b,c)
 
ADDDWRIT(dp).
  
(*variable list 1 und 2 *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( ( a + b + c ) z**3 - x ),
( y + z**5 + ( a ) ) 
)
   
DILWR(P,V).

(* computations *)
q:=DIPEXP(FIRST(P),3).

DILWR(LIST(q),V). 

(* 
(* conversions *) 
PP:=DIILFR(P). 
p:=FIRST(PP).  
q:=DIFIP(p,dp). 
Q:=LIST(q). 
DILWR(Q,V). 
*) 


(*Rational Polynomial ----------------------- *) 
(*domain descriptor        <var list> *) 
dp:=ADDDREAD().          RP(a,b,c)
 
ADDDWRIT(dp).
  
(*variable list 1 und 2 *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( ( a + b + c ) z**3 - x ),
( y + z**5 + ( a ) ) 
)
   
DILWR(P,V).

(* computations *)
q:=DIPEXP(FIRST(P),3).

DILWR(LIST(q),V). 


(*Rational Function ----------------------- *) 
(*domain descriptor        <var list> *) 
dp:=ADDDREAD().          RF(a,b,c)
 
ADDDWRIT(dp).
  
(*variable list 1 und 2 *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( ( a + b + c )/( a**2 - 4 ) z**3 - x ),
( y + z**5 + ( a ) ) 
)

DILWR(P,V). 
   
(* computations *)
q:=DIPEXP(FIRST(P),3).
 
DILWR(LIST(q),V). 
 

(*Complex Algebraic Number ----------------------- *) 
(*domain descriptor      <var> <minimal polynomial> *) 
dp:=ADDDREAD().          AF( i, ( i**2 + 1 ) ) 
 
ADDDWRIT(dp).
   
(*variable list 1 und 2 *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( ( 3 + 4 i ) z**3 - x ),
( y + z**5 + ( i**2 + 2 ) ) 
)
 
DILWR(P,V). 
   
(* computations *)
q:=DIPEXP(FIRST(P),3).
 
DILWR(LIST(q),V). 

 
(*Real Algebraic Number 1---------------------- *) 
(*domain descriptor      (<var>, <minimal polynomial>[, (r1,r2)[, s]] ) *) 
dp:=ADDDREAD().          AF( w2, ( (w2**2 - 2) (w2 - 3) ), ( 1, 2 ), 10 ) 
 
ADDDWRIT(dp).
   
(*variable list 1 und 2 *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( ( 1 + w2  ) z**3 - x ),
( y + z**5 + ( w2**2 + 32 ) ) 
)

 
DILWR(P,V). 

(* computations *)
q:=DIPEXP(FIRST(P),3).
 
DILWR(LIST(q),V). 

 
(*Real Algebraic Number 2---------------------- *) 
(*domain descriptor      (<var>, <minimal polynomial>[, (r1,r2)[, s]] ) *) 
dp:=ADDDREAD().          AF( w2, ( (w2**2 - 2) (w2 - 3)**2 ), ( 1, 2 ) ) 
 
ADDDWRIT(dp).
   
(*variable list 1 und 2 *)
V:=LIST("x","y","z"). 
 
(*Polynomials *)
P:=DILRD(V,dp).
 
(
( ( 1 + w2  ) z**3 - x ),
( y + z**5 + ( w2**2 + 32 ) ) 
)

 
DILWR(P,V). 

(* computations *)
q:=DIPEXP(FIRST(P),3).
 
DILWR(LIST(q),V).

(* -EOF- *)
