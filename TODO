
- check for safe publication idiom in polynomial construction

- make final variables public (?)

- make hashCode to reuse computed value --> not immutable

- make polynomial chinese remainder generic (?)

- check the 187 exceptions (170 runtime exceptions) that are thrown

- implement proxys for GB computation

- check solvable polynomials with non integral coefficients

- implement power series

- implement factorization

- implement matrices to vector

- use further util.concurrent algorithms where possible, e.g. in DHT

- add product category to applications

- refactor from BasicLinAlg to GenMatrix and GenVector 

- test caching results of gcd computation

- add version information in jas file names

- refactor ExpVector for different array element types



- implement term order optimization from MAS, also for coefficients 
  and solvable polynomials

- define power(n) in RingElem and implement in edu.jas.structure.Power 
  and classes, done

- refactor Hensel lifting to ufd package, not possible because of 
  coefficient replacement trick

- check correct term order in recursive algorithms,
  in GCD ModEval only univariate cases are used, so term order is not a problem

- add assertions to check for number of polynomial variables and term order,
  nvar in GenPolynomial and GenSolvablePolynomial done

- make examples with rational function field coefficients, 
  e.g. lisa-tdi example

- incorporate gcd() in the Quotient class in edu.jas.application

- rework junit tests to stop failing in case of zero polynomials



- refactor univPoly in solvable implementations, done

- add missing comments in edu.jas.Algebra*, done

- let inverse() throw a runtime exception, done; throw a checked exception (?)

- split ModInteger to ModIntegerRing factory, done

- make logger variables also final, done

- rename getval() to getVal() in ExpVector, done

- implement BigDecimal with RingElem interface, done

- replace thread-and-network-programming algorithms with 
  util.concurrent, done

- implement multivariate gcd, done

- add methods to GenPolynomialRing to construct x_i polynomials, done

- split RingFactory to ElemFactory, done

- split AlgebraicNumber to AlgebraicNumberRing factory, done
